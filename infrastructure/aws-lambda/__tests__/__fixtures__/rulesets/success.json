{
  "rules": {
    "openapi-v3-info-title": {
      "description": "Ensures that all OpenAPIs have a information object title.",
      "message": "The info object should have a title.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "title",
        "function": "truthy"
      }
    },
    "openapi-v3-info-title-max-length": {
      "description": "Ensures that all OpenAPIs information titles are not longer than 50 characters.",
      "message": "The info object title should not be more than 50 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "title",
        "function": "length",
        "functionOptions": {
          "max": 50
        }
      }
    },
    "openapi-v3-info-title-word-check": {
      "description": "Ensures that all OpenAPIs info object title do not contain certain words.",
      "message": "The info object title should not contain the words REST, Public, and Developer.",
      "given": "$.info.title",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "openapi-v3-info-title-in-kebab-case": {
      "description": "Ensures that all OpenAPIs information title are in Kebab case.",
      "message": "The info object title needs to be in Kebab case.",
      "given": "$.info.title",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[a-z][a-z0-9\\-]*$"
        }
      },
      "type": "style",
      "recommended": true,
      "formats": ["oas2", "oas3"],
      "severity": "error"
    },
    "openapi-v3-info-summary": {
      "description": "Ensures that all OpenAPIs have a information object summary.",
      "message": "The info object should have a summary.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "summary",
        "function": "truthy"
      }
    },
    "openapi-v3-info-summary-max-length": {
      "description": "Ensures that all OpenAPIs information object summary are not too long.",
      "message": "The info object summary should be less than 50 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 50
        }
      }
    },
    "openapi-v3-info-summary-word-check": {
      "description": "Ensures that all OpenAPIs information object summary do not contain some words.",
      "message": "The info object summary should not contain the words REST, Public, or Developer.",
      "given": "$.info.summary",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "openapi-v3-info-description": {
      "description": "Ensures that all OpenAPIs have a information description.",
      "message": "The info object should have a description.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "openapi-v3-info-description-max-length": {
      "description": "Ensures that all APIs descriptions are under a specific length.",
      "message": "The info object description should be less than 250 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 250
        }
      }
    },
    "openapi-v3-info-description-word-check": {
      "description": "Ensures that all APIs descriptions do not contain certain words.",
      "message": "The info object description cannot contain the words REST, public, developer.",
      "given": "$.info.description",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "openapi-v3-info-contact": {
      "description": "Ensures that all APIs have contact information.",
      "message": "API must have a contact information available.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "contact",
        "function": "truthy"
      }
    },
    "openapi-v3-info-contact-name": {
      "description": "Ensures that all APIs have contact name.",
      "message": "API must have a contact name available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "openapi-v3-info-contact-email": {
      "description": "Ensures that all APIs have contact email.",
      "message": "API must have a contact email available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "email",
        "function": "truthy"
      }
    },
    "openapi-v3-info-contact-url": {
      "description": "Ensures that all APIs have contact URL.",
      "message": "API must have a contact URL available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "url",
        "function": "truthy"
      }
    },
    "openapi-v3-info-license": {
      "description": "Ensures that all OpenAPIs have a information object license.",
      "message": "The info object should have a license.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "license",
        "function": "truthy"
      }
    },
    "openapi-v3-info-license-name": {
      "description": "Ensures that all OpenAPIs have a information object license name.",
      "message": "The info object should have a license name.",
      "given": "$.info.license",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "openapi-v3-info-license-url": {
      "description": "Ensures that all OpenAPIs have a information object license url.",
      "message": "The info object should have a license url.",
      "given": "$.info.license",
      "severity": "error",
      "then": {
        "field": "url",
        "function": "truthy"
      }
    },
    "openapi-v3-info-terms-of-service": {
      "description": "Ensures that all OpenAPIs have a information object terms of service.",
      "message": "The info object should have a terms of service.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "termsOfService",
        "function": "truthy"
      }
    },
    "openapi-v3-info-version": {
      "description": "Ensures that all OpenAPIs have a information object version.",
      "message": "The info object should have a version.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": ["oas3"],
      "then": {
        "field": "version",
        "function": "truthy"
      }
    },
    "openapi-v3-operations-description": {
      "description": "Ensures that each of the operations have a description.",
      "message": "Your operations all need descriptions.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "description",
          "function": "truthy"
        }
      ]
    },
    "openapi-v3-operations-description-length": {
      "description": "Ensures that the description for operations are not too long.",
      "message": "Your operation descriptions should not be more than 250 characters.",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "recommended": true,
      "then": [
        {
          "field": "description",
          "function": "length",
          "functionOptions": {
            "max": 250
          }
        }
      ],
      "type": "style"
    },
    "openapi-v3-operations-description-words-check": {
      "description": "Ensures that the description do not contain certain words.",
      "message": "Your operation descriptions should not use the words word, word, and word.",
      "given": "$.paths.*[get,post,patch,put,delete].description",
      "recommended": true,
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      },
      "type": "style"
    },
    "openapi-v3-operations-summary": {
      "description": "Ensures that each of the operations for an API have a summary.",
      "message": "All of your operations need summaries.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "summary",
          "function": "truthy"
        }
      ]
    },
    "openapi-v3-operations-summary-length": {
      "description": "Ensures that each of the operations summaries are not too long.",
      "message": "Your operations summaries can't be longer than 50 characters.",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "recommended": true,
      "then": [
        {
          "field": "summary",
          "function": "length",
          "functionOptions": {
            "max": 50
          }
        }
      ],
      "type": "style"
    },
    "openapi-v3-operations-summary-words-check": {
      "description": "Ensures that each of the operations summaries do not content certain words.",
      "message": "Your operations summaries should not contain the words word, word, and word.",
      "given": "$.paths.*[get,post,patch,put,delete].summary",
      "recommended": true,
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      },
      "type": "style"
    },
    "openapi-v3-operations-tags": {
      "description": "Ensures that each of the operations have a tags property.",
      "message": "All of your operations need to have tags.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "tags",
          "function": "truthy"
        }
      ]
    },
    "openapi-v3-operations-tags-one": {
      "description": "Ensures that each of the operations have at least one tag.",
      "message": "All of your operations need to have at least one tag.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "min": 1
        }
      },
      "type": "style"
    },
    "openapi-v3-parameters-name": {
      "description": "Ensures that that all parameters have a name.",
      "message": "Your parameter should all have names.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "openapi-v3-parameters-name-length": {
      "description": "Ensures that that parameter names aren't too long.",
      "message": "Your parameter names should not be longer than 25 characters.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "openapi-v3-parameters-name-word-check": {
      "description": "Ensures that that all some words aren't used for parameter names.",
      "message": "Your parameter names should not contain the words word, word, and word.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "openapi-v3-parameters-description": {
      "description": "Ensures that that all parameters have a descriptions.",
      "message": "Your parameters all need descriptions.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "openapi-v3-parameters-description-length": {
      "description": "Ensures that each of parameter description isn't too long.",
      "message": "Your parameter descriptions can't be more than 500 characters.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].description",
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 500
        }
      }
    },
    "openapi-v3-parameters-description-word-check": {
      "description": "Ensures that some words aren't used in parameter descriptions.",
      "message": "Your parameter descriptions can't contain the words word, word, and word.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].description",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "openapi-v3-parameters-in": {
      "description": "Ensures that that all parameters have an in property.",
      "message": "Your parameters all need to have in properties.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "in",
        "function": "truthy"
      }
    },
    "openapi-v3-parameters-example": {
      "description": "Ensures that that all parameters have a examples.",
      "message": "Your parameters all need examples.",
      "given": "$.paths.*.*.parameters[?(@.example=='query')]",
      "then": [
        {
          "field": "example",
          "function": "truthy"
        },
        {
          "field": "examples",
          "function": "truthy"
        }
      ]
    },
    "openapi-v3-parameters-schema": {
      "description": "Ensures that that all parameters have a schema.",
      "message": "Your parameter should all have a schema defined.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "schema",
        "function": "truthy"
      }
    },
    "openapi-v3-parameters-schema-type": {
      "description": "Ensures that that all parameters have a schema type.",
      "message": "Your parameter should all schema types.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].schema",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "openapi-v3-response-get-200-status-code": {
      "description": "Ensures GET operations have a 200 status code response.",
      "message": "A GET operation should have a 200 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].get.responses",
      "then": {
        "field": "200",
        "function": "truthy"
      }
    },
    "openapi-v3-response-get-200-media-type": {
      "description": "Ensuring GET operations have an application/json media type for 200 responses.",
      "message": "A GET operation should have an application/json media type for 200 response.",
      "severity": "error",
      "given": "$paths.get.responses.200.content",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "openapi-v3-response-get-500-status-code": {
      "description": "Ensures GET operations have a 500 status code response.",
      "message": "A GET operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].get.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "openapi-v3-response-post-201-status-code": {
      "description": "Ensures POST operations have a 201 status code response.",
      "message": "A POST operation should have a 201 status code for the response.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$.paths[*].post.responses",
      "then": {
        "field": "201",
        "function": "truthy"
      }
    },
    "openapi-v3-response-post-201-media-type": {
      "severity": "error",
      "description": "POST responses should have a JSON body.",
      "given": "$paths.post.responses.201.content",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "openapi-v3-response-post-500-status-code": {
      "description": "Ensures POST operations have a 500 status code response.",
      "message": "A POST operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].post.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "openapi-v3-response-put-204-status-code": {
      "description": "Ensures PUT operations have a 204 status code response.",
      "message": "A PUT operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "openapi-v3-response-put-204-no-body": {
      "description": "Ensures PUT operations do not have a response body.",
      "message": "A PUT operation should not have a response body.",
      "severity": "error",
      "given": "$paths.put.responses.204",
      "then": {
        "field": "content",
        "function": "falsy"
      }
    },
    "openapi-v3-response-put-500-status-code": {
      "description": "Ensures PUT operations have a 500 status code response.",
      "message": "A PUT operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].put.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "openapi-v3-response-delete-204-status-code": {
      "description": "Ensures DELETE operations have a 204 status code response.",
      "message": "A DELETE operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "openapi-v3-response-delete-204-no-body": {
      "description": "Ensures DELETE operations do not have a response body.",
      "message": "A DELETE operation should not have a response body.",
      "severity": "error",
      "given": "$paths.delete.responses.204",
      "then": {
        "field": "content",
        "function": "falsy"
      }
    },
    "openapi-v3-response-delete-500-status-code": {
      "description": "Ensures DELETE operations have a 500 status code response.",
      "message": "A DELETE operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": ["oas2", "oas3"],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-names-length": {
      "description": "Ensure schema names should be no more than 25 characters.",
      "message": "All schema names should be less than 25 characters.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "openapi-v3-schema-names-words": {
      "description": "Schema names should not contain certain words.",
      "message": "Schema property names not contains the words word, word, and word.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "openapi-v3-schema-description": {
      "description": "Ensure all schema properties should have a description.",
      "message": "All schema should have descriptions.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$.components.schemas.*",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-description-length": {
      "description": "All schemas descriptions should be shorter than 20 characters.",
      "message": "Description needs to be less than 20 characters.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$.components.schemas.*",
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 20
        }
      }
    },
    "openapi-v3-schema-description-words": {
      "description": "Some words should not be be contained within the schema description.",
      "message": "Do not use the words word, word, and word in the schema descriptions.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$.components.schemas.*",
      "then": {
        "field": "description",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "openapi-v3-schema-required": {
      "description": "Ensuring that all schema have a required property.",
      "message": "All of your schema need to have a required property.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$.components.schemas.*",
      "then": {
        "field": "required",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-type": {
      "description": "Ensuring that all schema have a type property.",
      "message": "All schema should have a type property.",
      "severity": "error",
      "formats": ["oas3"],
      "given": "$.components.schemas.*",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-properties": {
      "description": "Ensuring that all schema should have properties.",
      "message": "All of your schema need to have properties.",
      "severity": "error",
      "formats": ["oas3"],
      "given": "$.components.schemas.*",
      "then": {
        "field": "properties",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-properties-type": {
      "description": "Ensuring that all schemas properties should have a type.",
      "message": "All schema properties should have type property.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$..properties.*",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-properties-descriptions": {
      "description": "Ensure that all schemas properties should have a description.",
      "message": "All schema properties should have descriptions.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$..properties.*",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "openapi-v3-schema-properties-descriptions-length": {
      "description": "Ensure that schema descriptions aren't too long.",
      "message": "The schema description length needs to be less than 250 characters.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$..properties.*",
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 250
        }
      }
    },
    "openapi-v3-schema-properties-descriptions-words": {
      "description": "Some words should not exist within the property description.",
      "message": "Schema property descriptions should not contain the words word, word, and word.",
      "severity": "warn",
      "formats": ["oas3"],
      "given": "$..properties.*",
      "then": {
        "field": "description",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "openapi-v3-tags-object": {
      "description": "Ensuring that there are tags being applied.",
      "message": "You should have a central tags object.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "truthy"
      }
    },
    "openapi-v3-tags-one": {
      "description": "Ensuring that there is at least on tag being applied.",
      "message": "You should have at least one tag.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "min": 1
        }
      },
      "type": "style"
    },
    "openapi-v3-tags-name": {
      "description": "Ensuring that all tags have a name.",
      "message": "All tags should have a name.",
      "given": "$.tags[*]",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "openapi-v3-tags-description": {
      "description": "Ensuring that all tags have a description.",
      "message": "All tags should have a description.",
      "given": "$.tags[*]",
      "severity": "error",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    }
  }
}
